#version 300 es
 
// fragment shaders don't have a default precision so we need
// to pick one. highp is a good default. It means "high precision"
precision highp float;

in vec3 v_normal;
in vec4 v_color;
in vec2 v_texcoord;
in vec3 v_surfaceToLight;
in vec3 v_surfaceToView;

uniform vec3 u_reverseLightDirection;
uniform vec3 u_diffuse;
uniform vec3 u_ambient;
uniform vec3 u_emissive;
uniform vec3 u_specular;
uniform float u_shininess;
uniform float u_opacity;
uniform vec3 u_ambientLight;

out vec4 outColor;
 
void main() {

  vec3 normal = normalize(v_normal);

  // directional lighting
  // float light = dot(normal, u_reverseLightDirection);

  // point lighting
  vec3 surfaceToLightDirection = normalize(v_surfaceToLight);
  vec3 surfaceToViewDirection = normalize(v_surfaceToView);
  // The vertical direction away from the surface
  vec3 halfVector = normalize(surfaceToLightDirection + surfaceToViewDirection);
  
  // The dot product between the direction of the light and the angle
  float dotFromDirection = dot(surfaceToLightDirection, -u_lightDirection);

  // light hitting plane
  float light = dot(normal, surfaceToLightDirection) * 0.5 + 0.5;
  // specular highlights - strengthen at the points where the light is in the angle thats hitting our view
  float specularLight = pow(clamp(dot(normal, halfVector), 0.0, 1.0), u_shininess);

  vec3 effectiveDiffuse = u_diffuse * v_color.rgb;
  float effectiveOpacity = opacity * v_color.a;
  
  outColor = vec4(
				  u_emissive +
				  u_ambient + u_ambientLight +
				  effectiveDiffuse * light +
				  u_specular * specularLight,
				  effectiveOpacity);
}
